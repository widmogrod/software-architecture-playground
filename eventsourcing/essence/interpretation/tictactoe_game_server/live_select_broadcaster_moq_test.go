// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tictactoe_game_server

import (
	"sync"
)

// Ensure, that BroadcasterMock does implement Broadcaster.
// If this is not the case, regenerate this file with moq.
var _ Broadcaster = &BroadcasterMock{}

// BroadcasterMock is a mock implementation of Broadcaster.
//
//	func TestSomethingThatUsesBroadcaster(t *testing.T) {
//
//		// make and configure a mocked Broadcaster
//		mockedBroadcaster := &BroadcasterMock{
//			BroadcastToSessionFunc: func(sessionID string, msg []byte)  {
//				panic("mock out the BroadcastToSession method")
//			},
//		}
//
//		// use mockedBroadcaster in code that requires Broadcaster
//		// and then make assertions.
//
//	}
type BroadcasterMock struct {
	// BroadcastToSessionFunc mocks the BroadcastToSession method.
	BroadcastToSessionFunc func(sessionID string, msg []byte)

	// calls tracks calls to the methods.
	calls struct {
		// BroadcastToSession holds details about calls to the BroadcastToSession method.
		BroadcastToSession []struct {
			// SessionID is the sessionID argument value.
			SessionID string
			// Msg is the msg argument value.
			Msg []byte
		}
	}
	lockBroadcastToSession sync.RWMutex
}

// BroadcastToSession calls BroadcastToSessionFunc.
func (mock *BroadcasterMock) BroadcastToSession(sessionID string, msg []byte) {
	if mock.BroadcastToSessionFunc == nil {
		panic("BroadcasterMock.BroadcastToSessionFunc: method is nil but Broadcaster.BroadcastToSession was just called")
	}
	callInfo := struct {
		SessionID string
		Msg       []byte
	}{
		SessionID: sessionID,
		Msg:       msg,
	}
	mock.lockBroadcastToSession.Lock()
	mock.calls.BroadcastToSession = append(mock.calls.BroadcastToSession, callInfo)
	mock.lockBroadcastToSession.Unlock()
	mock.BroadcastToSessionFunc(sessionID, msg)
}

// BroadcastToSessionCalls gets all the calls that were made to BroadcastToSession.
// Check the length with:
//
//	len(mockedBroadcaster.BroadcastToSessionCalls())
func (mock *BroadcasterMock) BroadcastToSessionCalls() []struct {
	SessionID string
	Msg       []byte
} {
	var calls []struct {
		SessionID string
		Msg       []byte
	}
	mock.lockBroadcastToSession.RLock()
	calls = mock.calls.BroadcastToSession
	mock.lockBroadcastToSession.RUnlock()
	return calls
}
