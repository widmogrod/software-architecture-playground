// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package question

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuestionUseCasesClient is the client API for QuestionUseCases service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionUseCasesClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
}

type questionUseCasesClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionUseCasesClient(cc grpc.ClientConnInterface) QuestionUseCasesClient {
	return &questionUseCasesClient{cc}
}

func (c *questionUseCasesClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, "/QuestionUseCases/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionUseCasesServer is the server API for QuestionUseCases service.
// All implementations must embed UnimplementedQuestionUseCasesServer
// for forward compatibility
type QuestionUseCasesServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	mustEmbedUnimplementedQuestionUseCasesServer()
}

// UnimplementedQuestionUseCasesServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionUseCasesServer struct {
}

func (UnimplementedQuestionUseCasesServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionUseCasesServer) mustEmbedUnimplementedQuestionUseCasesServer() {}

// UnsafeQuestionUseCasesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionUseCasesServer will
// result in compilation errors.
type UnsafeQuestionUseCasesServer interface {
	mustEmbedUnimplementedQuestionUseCasesServer()
}

func RegisterQuestionUseCasesServer(s grpc.ServiceRegistrar, srv QuestionUseCasesServer) {
	s.RegisterService(&_QuestionUseCases_serviceDesc, srv)
}

func _QuestionUseCases_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionUseCasesServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QuestionUseCases/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionUseCasesServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuestionUseCases_serviceDesc = grpc.ServiceDesc{
	ServiceName: "QuestionUseCases",
	HandlerType: (*QuestionUseCasesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _QuestionUseCases_CreateQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question.proto",
}
